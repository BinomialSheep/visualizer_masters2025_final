let n;const m=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&m.decode();let b=null;function g(){return(b===null||b.byteLength===0)&&(b=new Uint8Array(n.memory.buffer)),b}function y(e,t){return e=e>>>0,m.decode(g().subarray(e,e+t))}let a=0;const u=typeof TextEncoder<"u"?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},x=typeof u.encodeInto=="function"?function(e,t){return u.encodeInto(e,t)}:function(e,t){const r=u.encode(e);return t.set(r),{read:e.length,written:r.length}};function d(e,t,r){if(r===void 0){const c=u.encode(e),l=t(c.length,1)>>>0;return g().subarray(l,l+c.length).set(c),a=c.length,l}let _=e.length,o=t(_,1)>>>0;const i=g();let s=0;for(;s<_;s++){const c=e.charCodeAt(s);if(c>127)break;i[o+s]=c}if(s!==_){s!==0&&(e=e.slice(s)),o=r(o,_,_=s+e.length*3,1)>>>0;const c=g().subarray(o+s,o+_),l=x(e,c);s+=l.written}return a=s,o}let w=null;function f(){return(w===null||w.byteLength===0)&&(w=new Int32Array(n.memory.buffer)),w}function T(e,t){let r,_;try{const s=n.__wbindgen_add_to_stack_pointer(-16),c=d(t,n.__wbindgen_malloc,n.__wbindgen_realloc),l=a;n.gen(s,e,c,l);var o=f()[s/4+0],i=f()[s/4+1];return r=o,_=i,y(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(r,_,1)}}function E(e,t,r){const _=d(e,n.__wbindgen_malloc,n.__wbindgen_realloc),o=a,i=d(t,n.__wbindgen_malloc,n.__wbindgen_realloc),s=a,c=n.vis(_,o,i,s,r);return p.__wrap(c)}function M(e,t){const r=d(e,n.__wbindgen_malloc,n.__wbindgen_realloc),_=a,o=d(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=a;return n.get_max_turn(r,_,o,i)>>>0}class p{static __wrap(t){t=t>>>0;const r=Object.create(p.prototype);return r.__wbg_ptr=t,r}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_ret_free(t)}get score(){return n.__wbg_get_ret_score(this.__wbg_ptr)}set score(t){n.__wbg_set_ret_score(this.__wbg_ptr,t)}get err(){let t,r;try{const i=n.__wbindgen_add_to_stack_pointer(-16);n.__wbg_get_ret_err(i,this.__wbg_ptr);var _=f()[i/4+0],o=f()[i/4+1];return t=_,r=o,y(_,o)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,r,1)}}set err(t){const r=d(t,n.__wbindgen_malloc,n.__wbindgen_realloc),_=a;n.__wbg_set_ret_err(this.__wbg_ptr,r,_)}get svg(){let t,r;try{const i=n.__wbindgen_add_to_stack_pointer(-16);n.__wbg_get_ret_svg(i,this.__wbg_ptr);var _=f()[i/4+0],o=f()[i/4+1];return t=_,r=o,y(_,o)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,r,1)}}set svg(t){const r=d(t,n.__wbindgen_malloc,n.__wbindgen_realloc),_=a;n.__wbg_set_ret_svg(this.__wbg_ptr,r,_)}}async function A(e,t){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,t)}catch(_){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",_);else throw _}const r=await e.arrayBuffer();return await WebAssembly.instantiate(r,t)}else{const r=await WebAssembly.instantiate(e,t);return r instanceof WebAssembly.Instance?{instance:r,module:e}:r}}function h(){const e={};return e.wbg={},e.wbg.__wbindgen_throw=function(t,r){throw new Error(y(t,r))},e}function v(e,t){return n=e.exports,W.__wbindgen_wasm_module=t,w=null,b=null,n}function k(e){if(n!==void 0)return n;const t=h();e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e));const r=new WebAssembly.Instance(e,t);return v(r,e)}async function W(e){if(n!==void 0)return n;typeof e>"u"&&(e=new URL("/visualizer_masters2025_final/wasm/rust_bg.wasm",self.location));const t=h();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:r,module:_}=await A(await e,t);return v(r,_)}export{p as Ret,W as default,T as gen,M as get_max_turn,k as initSync,E as vis};
